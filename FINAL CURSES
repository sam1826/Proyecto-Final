#!/user/bin/python
import socket
import sys
import os
from os import system
import curses


class mk_socket:
    
    def __init__(self, sid, host, port=21):
        try:
           self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)      
        except socket.error:
           print ("No se pudo crear el socket")
        self.s.connect((host, port))
        if sid==1:
           print ("El socket se conecto a UP con la direccion == {0}" .format(host))
        self.sid = str(sid)
        self.open = True

    def hold_state(self, error):
        pass

    def cls(self):
        # don't close the socket more than once
        if self.open:
            self.s.close()
            self.open = False

    def send(self, mes='', filt=''):
        expected=False
        CRLF=True
        print (self.sid, '>>>',)

        try:
            self.s.send(bytes(mes + ('', '\r\n')[CRLF==True],'utf-8'))
        except socket.error:
            self.hold_state('Reiniciar conexion')

        if CRLF:
            if filt:
                print (mes.replace(filt, '*'*len(filt)))
            else:
                print (mes)
        return self.recv(expected)
        
    def send2(self, mes=""):
        aux = bytes(mes[True],'utf-8')
        self.s.send( aux )

    def recv(self,expected=False):
        print (self.sid, '<<<',)

        try:
            rec = self.s.recv(1024)
        except socket.error:
            self.hold_state('Reiniciar conecion')

        print (rec)
        return rec


class ftp_client:

    def __init__(self):
        self.buffer_size = 1024
        self.sock_pasv = False

    def connect(self, host):
        self.sock = mk_socket(1, host)
        self.sock.recv()

    def LOGIN(self, usern, passw):
        self.sock.send('USER '+usern.decode('utf-8'))
        res = self.sock.send('PASS '+passw.decode('utf-8'), filt=passw.decode('utf-8'))

    def PASV(self):

        if self.sock_pasv:
            print ('Checking for open socket')
            assert not self.sock_pasv.open # make sure there is no port open
        
        # propose passive connection
        msg = self.sock.send('PASV')
        mmsg = msg.decode('utf-8')
        nmsg = mmsg.split('(')[-1].split(')')[0]
        print (nmsg)
        parseo = nmsg.split(',')
        newip, newport = '.'.join(parseo[:4]), int(parseo[4])*256 + int(parseo[5])
        print ('Puerto conexion pasivo: {0}' .format(newport))
        self.sock_pasv = mk_socket(2, newip, newport)
        return newip, newport
        

    def DIR(self):
        
        self.PASV()
        self.sock.send('LIST')
        msg = ''
        ad = True
        while ad != '':
            add = self.sock_pasv.recv()
            ad = add.decode('utf-8')
            msg += ad
        print ('Empty message sent. File list is done.')
            # there is a CRLF, we know we can close
        self.sock_pasv.cls()
        flist = msg.split('\r\n')[:-1]
        for ele in flist:
            print (ele)
            # trigger the expected 226
        self.sock.recv(226)

        return flist
        
    def QUIT(self):

        if self.sock_pasv:
            if self.sock_pasv.open:
                print ('Passive port open... closing')
                self.sock_pasv.cls()
            else:
                print ('Passive port already closed')
        self.sock.send('QUIT')
        self.sock.cls()
        
    def upload(self, fname, fsource):
        
        self.PASV()
        self.sock.send('STOR '+fname.decode('utf-8'))

        my_file = Open(fsource.decode('utf-8'))
        while my_file.opened:
            self.sock_pasv.send2(my_file.next(self.buffer_size)) # don't include the CRLF in the file transfer

        self.sock_pasv.cls()
        print (self.sock.recv())
        
        
    def download(self, fname, fsource):
        self.PASV()
        self.sock.send('RETR '+fname.decode('utf-8'))
        msg = ''
        ad = True
        while ad != '':
            add = self.sock_pasv.recv()
            ad = add.decode('utf-8')
            msg += ad
        self.sock_pasv.cls()
        file = open(fsource,'w')
        file.write(msg)
		

    def RETR(self, rname):
        self.sock.send('RETR '+rname.decode('utf-8'))
        
    def MODE(self, m='S'):
        self.sock.send('MODE '+m)

    def TYPE(self, t='A'):
        self.sock.send('TYPE '+t.decode('utf-8'))

    def STRU(self, s='F'):
        self.sock.send('STRU '+s)

    def CWD(self, dname):
        self.sock.send('CWD '+dname.decode('utf-8'), 257)

    def MKD(self, dname):
        self.sock.send('MKD '+dname.decode('utf-8'))

    def PWD(self):
        self.sock.send('PWD')
        
    def DELETE(self, fname):
        self.sock.send('DELE '+fname.decode('utf-8'))
        
    def DELETED(self, dname):
        self.sock.send('RMD '+dname.decode('utf-8'))
        
    def HELP(self, cad):
        self.sock.send('HELP '+cad.decode('utf-8'))
        
    def RNFR(self, fromname, toname):
         resp = self.sock.send('RNFR ' + fromname.decode('utf-8'))
         return self.sock.send('RNTO ' + toname.decode('utf-8'))	

    def DLOCAL(self, dir = "/"):
        stri = '\r\n'.join(os.listdir(dir))
        print (stri)

    def CDUP(self):
        self.sock.send('CDUP')

    def do_nothing(self):
        self.sock.send('NOOP')

class Open:

    def __init__(self, name):

        self.f = open(name, 'r')
        self.size = os.stat(name)[6]
        self.pos = 0
        self.opened = True

    def next(self, buff=1024):

        self.f.seek(self.pos)
        self.pos += buff

        if self.pos >= self.size:
            piece = self.f.read(-1)
            self.f.close()
            self.opened = False
        else:
            piece = self.f.read(buff)
            
        return piece



if __name__ == '__main__':


    def get_param(prompt_string):
        screen.clear()
        screen.border(0)
        screen.addstr(2, 2, prompt_string)
        screen.refresh()
        input = screen.getstr(10, 10, 60)
        return input

    x = 0
    while x != ord('7'):
        screen = curses.initscr()

        screen.clear()
        screen.border(0)
        screen.addstr(2, 2, "Please enter a number...")
        screen.addstr(4, 4, "1 - Login")
        screen.addstr(5, 4, "2 - Mostrar Directorio")
        screen.addstr(6, 4, "3 - Subir Archivo")
        screen.addstr(7, 4, "4 - Bajar Archivo")
        screen.addstr(8, 4, "5 - Renombrar Archivo")
        screen.addstr(9, 4, "6 - Borrar Archivo")
        screen.addstr(10, 4, "7 - Salir")
        
        screen.refresh()

        x = screen.getch()

        if x == ord('1'):
            Cliente = ftp_client()
            Direccion = get_param("Direccion: ")
            Usuario = get_param("Usuario: ")
            Password = get_param("Contrase√±a ")
            Cliente.connect((Direccion))
            Cliente.LOGIN((Usuario), (Password))
            screen.getch()

        if x == ord('2'):
            Cliente.DIR()
            screen.getch()
            
        if x == ord('3'):
            Nombre = get_param("Nombre de archivo: ")
            Ruta = get_param("Ruta donde esta el archivo, ejemplo /home/nate")
            Tipo = get_param("Tipo archivo (A/I)")
            Cliente.MODE()
            Cliente.TYPE(Tipo)
            Cliente.STRU()
            Cliente.upload(Nombre, Ruta)
            screen.getch()
            
        if x == ord('4'):
            Nombre = get_param("Nombre de archivo: ")
            Ruta = get_param("Ruta donde guardara el archivo, ejemplo /home/nate")
            Cliente.download(Nombre, Ruta)
            screen.getch()
        
        if x == ord('5'):
            Nombre = get_param("Nombre de archivo: ")
            Nombre2 = get_param("Nombre nuevo: ")
            Cliente.RNFR(Nombre, Nombre2)
            screen.getch()
            
        if x == ord('6'):
            Nombre = get_param("Nombre de archivo a borrar: ")
            Cliente.DELETE(Nombre)
            screen.getch()

        curses.endwin()
        
    Cliente.QUIT()




    #MYclient = ftp_client()

    #try:
     #   MYclient.connect(("192.100.230.21"))

    #except socket.error:
      #  print ("Could not connect")
     #   sys.exit(1)

    #MYclient.LOGIN(("userftp"), ("r3d3sf1s1c@s"))
    
    #MYclient.MODE()    # stream transfer mode
    #MYclient.TYPE('I') # image/binary type
    #MYclient.STRU()    # file structure
    #MYclient.download('Final.py','/home/samuel/Programas/Documentos/FTP/prueba2.py')
    #MYclient.PWD()
    #MYclient.upload('Final.py', sys.argv[0])
    #MYclient.upload('prov.py','/home/samuel/Programas/Documentos/FTP/t.py')
    #MYclient.DIR()
    #MYclient.upload('rw.py','/home/samuel/Programas/Documentos/FTP/holawq')
    #MYclient.DIR()
    #MYclient.RNFR('q','wq')
    #MYclient.DELETE('Final.py')
    #MYclient.DIR()
